// utils.js
require('dotenv').config();
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');

const TELEGRAM_API = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`;
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const ADMIN_ID = process.env.ADMIN_ID;

// ==== üì© –ú–ï–°–ï–î–ñ–Ü ====
async function sendMessage(chatId, text, options = {}) {
    const payload = {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
    };
    const res = await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
    return res.data.result.message_id;
}

async function sendPhotoGroup(chatId, photoIds) {
    const media = photoIds.map(id => ({ type: 'photo', media: id }));
    await axios.post(`${TELEGRAM_API}/sendMediaGroup`, {
        chat_id: chatId,
        media
    });
}

async function sendSticker(chatId, sticker) {
    await axios.post(`${TELEGRAM_API}/sendSticker`, { chat_id: chatId, sticker });
}

async function sendDocument(chatId, fileId) {
    await axios.post(`${TELEGRAM_API}/sendDocument`, {
        chat_id: chatId,
        document: fileId
    });
}

async function handleStart(chatId) {
    const { data: welcomeData, error } = await supabase
        .from('welcome')
        .select('*')
        .limit(1)
        .single();

    if (error || !welcomeData) {
        console.error('–ü–æ–º–∏–ª–∫–∞ Supabase:', error?.message || '–ü–æ—Ä–æ–∂–Ω—è —Ç–∞–±–ª–∏—Ü—è');
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    const { sticker_id, welcome_text_1, welcome_text_2 } = welcomeData;

    if (sticker_id) {
        await axios.post(`${TELEGRAM_API}/sendSticker`, {
            chat_id: chatId,
            sticker: sticker_id
        });
    }

    if (welcome_text_1) {
        await sendMessage(chatId, welcome_text_1);
    }

    if (welcome_text_2) {
        await sendMessage(chatId, welcome_text_2, {
            reply_markup: {
                inline_keyboard: [[{ text: 'üéÆ –†–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É', callback_data: 'start_game' }]]
            }
        });
    }
}

async function handleGameAnswer(chatId, callbackData, data) {
  const answer = parseInt(callbackData.split('_')[1], 10);
  const msgIdFromQuery = data.callback_query.message.message_id;
  const icon = ['‚òëÔ∏è', 'üü¢', 'üéØ', 'üß©', 'üìç', '‚ö°Ô∏è', 'üöÄ'][Math.floor(Math.random() * 7)];

  await axios.post(`${TELEGRAM_API}/editMessageText`, {
    chat_id: chatId,
    message_id: msgIdFromQuery,
    text: `${icon} –û–±—Ä–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ${answer}`,
    reply_markup: { inline_keyboard: [] }
  });

  const { data: userData } = await supabase.from('users').select('*').eq('chat_id', chatId).single();
  if (!userData || userData.finished || String(userData.message_id) !== String(msgIdFromQuery)) return;

  const answers = userData.answers?.split(',').map(Number) || [];
  answers[userData.step - 1] = answer;
  const nextStep = userData.step + 1;
  const finished = nextStep > 7;

  await supabase.from('users').update({
    step: finished ? userData.step : nextStep,
    answers: answers.join(','),
    finished
  }).eq('chat_id', chatId);

  if (finished) {
    await sendMessage(chatId, `üéÆ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ üéÆ`);
    await sendResult(chatId, answers);
  } else {
    await sendQuestion(chatId, nextStep);
  }
}

// ==== üß† –ì–†–ê ====
async function sendQuestion(chatId, number) {
  try {
    const { data, error } = await supabase.from('questions').select('*').eq('question_number', number).single();
    if (error || !data) throw new Error('‚ö†Ô∏è –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');

    await sendMessage(chatId, `–ü–∏—Ç–∞–Ω–Ω—è ${number}:

${data.question_text}`);

    const photos = [data.photo1_id, data.photo2_id, data.photo3_id, data.photo4_id, data.photo5_id, data.photo6_id].filter(Boolean);
    if (photos.length) await sendPhotoGroup(chatId, photos);

    const buttons = [
      [1, 2, 3].map(i => ({ text: `${i}`, callback_data: `answer_${i}` })),
      [4, 5, 6].map(i => ({ text: `${i}`, callback_data: `answer_${i}` }))
    ];
    const msgId = await sendMessage(chatId, 'üß† –û–±–µ—Ä–∏ —Ç–æ–π, —â–æ –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–µ–±–µ: üëá', {
      reply_markup: { inline_keyboard: buttons }
    });
    await supabase.from('users').update({ message_id: msgId }).eq('chat_id', chatId);
  } catch (e) {
    console.error('sendQuestion error:', e.message);
    await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º.');
  }
}

async function sendResult(chatId, answers) {
    const counts = Array(6).fill(0);
    answers.forEach(a => counts[a - 1]++);

    const max = Math.max(...counts);
    const candidates = counts.map((c, i) => (c === max ? i + 1 : null)).filter(Boolean);
    const result = candidates[candidates.length - 1];
    const display = await getUserDisplay(chatId);
    await sendMessage(ADMIN_ID, `üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>${escapeHTML(display)}</b> –æ—Ç—Ä–∏–º–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>${result}</b>`, {
        parse_mode: 'HTML'
    });


    const { data, error } = await supabase
        .from('results')
        .select('*')
        .eq('result_number', result)
        .single();

    if (error || !data) {
        await sendMessage(chatId, '‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await sendMessage(chatId, data.text1);
    await sendMessage(chatId, data.text2);
    await sendDocument(chatId, data.pdf_id);

    // ‚è± Follow-up —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ —É —Ñ–æ–Ω—ñ
    setTimeout(async () => {
        try {
            const f = await supabase.from('followup').select('*').limit(1).single();
            if (f.data) {
                await sendMessage(chatId, f.data.message1);
                await sendMessage(chatId, f.data.message2);
            }

            await sendMessage(chatId, 'üé≠ –ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–≤–æ—é –≥—Ä—É –≤ –Ω–æ–≤—ñ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ?', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üß© –©–æ –±—É–¥–µ –≤ —Ü—ñ–π –≥—Ä—ñ:', callback_data: 'after_payment_1' }]]
                }
            });

            // –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await supabase.from('users').delete().eq('chat_id', chatId);
        } catch (e) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —É follow-up:', e);
        }
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥

}


// ==== üßæ –ü–Ü–°–õ–Ø –û–ü–õ–ê–¢–ò ====
async function sendAfterPaymentMessages(chatId) {
    const { data, error } = await supabase
        .from('after_payment')
        .select('*')
        .order('order');

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase:', error.message);
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    if (!Array.isArray(data)) {
        console.error('‚ùå –î–∞–Ω—ñ –Ω–µ —î –º–∞—Å–∏–≤–æ–º:', data);
        await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    for (const row of data) {
        if (row.type === 'text') {
            if (row.content?.trim()) {
                await sendMessage(chatId, row.content);
            } else {
                console.warn('‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫—É:', row);
            }
        }

        if (row.type === 'button') {
            if (row.content?.trim() && row.button_text?.trim()) {
                await sendMessage(chatId, row.content, {
                    reply_markup: {
                        inline_keyboard: [[{ text: row.button_text, callback_data: 'start_subscription' }]]
                    }
                });
            } else {
                console.warn('‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞–±–æ –∫–Ω–æ–ø–∫–∞ –≤ button-–±–ª–æ—Ü—ñ:', row);
            }
        }
    }
}

async function sendAfterPaymentFollowup(chatId) {
    const { data, error } = await supabase
        .from('after_payment_followup')
        .select('*')
        .order('order');

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase (after_payment_followup):', error.message);
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    if (!Array.isArray(data)) {
        console.error('‚ùå –î–∞–Ω—ñ –Ω–µ —î –º–∞—Å–∏–≤–æ–º (after_payment_followup):', data);
        await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ.');
        return;
    }

    for (const row of data) {
        if (row.type === 'text' && row.content?.trim()) {
            await sendMessage(chatId, row.content);
        }

        if (row.type === 'button' && row.content?.trim() && row.button_text?.trim()) {
            await sendMessage(chatId, row.content, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: row.button_text,
                        callback_data: 'start_payment_flow' // üëà —Ç–≤—ñ–π –Ω–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
                    }]]
                }
            });
        }
    }
}

async function approvePayment(chatId) {
    // 1Ô∏è‚É£ –î–æ–¥–∞—î–º–æ —É —Ç–∞–±–ª–∏—Ü—é paid_users
    await supabase.from('paid_users').insert({ id: chatId });

    // 2Ô∏è‚É£ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
    await sendMessage(chatId, 'üéØ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥—å —É –Ω–∞—Å—Ç—É–ø–Ω—É –∫—ñ–º–Ω–∞—Ç—É –≥—Ä–∏. üëá', {
        reply_markup: {
            inline_keyboard: [[
                { text: 'üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥—É –∫—ñ–º–Ω–∞—Ç—É –≥—Ä–∏', url: 'https://t.me/+9me2lhd12t00MGEy' }
            ]]
        }
    });
}

async function safeSendMessage(chatId, text, options = {}) {
    try {
        return await sendMessage(chatId, text, options);
    } catch (e) {
        console.error('sendMessage error:', e?.response?.data || e.message);
    }
}

async function getUserDisplay(chatId) {
    try {
        const { data: userData } = await axios.get(`${TELEGRAM_API}/getChat?chat_id=${chatId}`);
        const firstName = userData?.result?.first_name || '';
        const username = userData?.result?.username ? `@${userData.result.username}` : '';
        return `${firstName} ${username}`.trim();
    } catch (e) {
        console.error('‚ùå getUserDisplay error:', e?.response?.data || e.message);
        return chatId.toString(); // fallback
    }
}


async function sendStartSubscription(chatId) {
    const { data, error } = await supabase
        .from('after_payment_followup') // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        .select('*')
        .order('order');

    const display = await getUserDisplay(chatId);
    await sendMessage(ADMIN_ID, `üí≥ –ö–ª—ñ—î–Ω—Ç <b>${escapeHTML(display)}</b> –ø–µ—Ä–µ–π—à–æ–≤ –¥–æ –æ–ø–ª–∞—Ç–∏`, {
        parse_mode: 'HTML'
    });

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase (sendStartSubscription):', error.message);
        await sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    if (!Array.isArray(data)) {
        console.error('‚ùå –î–∞–Ω—ñ –Ω–µ –º–∞—Å–∏–≤ (sendStartSubscription):', data);
        await sendMessage(chatId, '‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
    }

    for (const row of data) {
        if (row.type === 'text' && row.content?.trim()) {
            await sendMessage(chatId, row.content);
        }

        if (row.type === 'button' && row.content?.trim() && row.button_text?.trim()) {
            await sendMessage(chatId, row.content, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: row.button_text,
                        callback_data: 'next_logic' // üîÅ –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é
                    }]]
                }
            });
        }
    }
}

async function sendPhotoToAdmin(chatId, fileId, displayName) {
    const caption = `üì∏ –ù–æ–≤–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–¥ <b>${escapeHTML(displayName)}</b>\n<code>${chatId}</code>`;

    const response = await axios.post(`${TELEGRAM_API}/sendPhoto`, {
        chat_id: ADMIN_ID,
        photo: fileId,
        caption: caption,
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [[
                { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: `approve_${chatId}` },
                { text: '‚õîÔ∏è –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_${chatId}` }
            ]]
        }
    });

    const messageId = response.data.result.message_id;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
    await supabase.from('admin_messages').insert({
        chat_id: chatId,
        message_id: messageId
    });
}



// ==== üë§ –ö–û–†–ò–°–¢–£–í–ê–ß ====
async function getUser(chatId) {
    const { data } = await supabase.from('users').select('*').eq('chat_id', chatId).single();
    if (!data) return { step: 1, answers: [] };
    const answers = data.answers?.split(',').map(n => parseInt(n)).filter(n => !isNaN(n)) || [];
    return { step: data.step, answers, finished: data.finished };
}

async function saveUser(chatId, step, answers) {
    await supabase.from('users').insert({ chat_id: chatId, step, answers: answers.join(','), finished: false });
}

async function updateUser(chatId, step, answers, finished = false) {
  await supabase.from('users').upsert({
    chat_id: chatId,
    step,
    answers: answers.join(','),
    finished
  }, { onConflict: ['chat_id'] });
}


async function getStoredMessageId(chatId) {
    const { data } = await supabase.from('users').select('message_id').eq('chat_id', chatId).single();
    return data?.message_id || null;
}

// ==== –ü–Ü–î–ü–ò–°–ö–ê ====
async function markUserAsPending(chatId) {
    const { data } = await supabase.from('pending').select('chat_id').eq('chat_id', chatId);
    if (!data?.length) await supabase.from('pending').insert({ chat_id: chatId });
}

async function isUserPending(chatId) {
    const { data } = await supabase.from('pending').select('*').eq('chat_id', chatId);
    return !!data?.length;
}

async function removePendingUser(chatId) {
    await supabase.from('pending').delete().eq('chat_id', chatId);
}

// ==== COOL DOWN ====
async function isCooldownPassed(chatId, action, cooldownSeconds) {
    const now = Date.now();
    const { data } = await supabase.from('cooldown').select('*').eq('chat_id', chatId).eq('action', action).maybeSingle();
    if (data) {
        const last = new Date(data.timestamp).getTime();
        if ((now - last) / 1000 < cooldownSeconds) return false;
        await supabase.from('cooldown').update({ timestamp: new Date().toISOString() }).eq('chat_id', chatId).eq('action', action);
        return true;
    } else {
        await supabase.from('cooldown').insert({ chat_id: chatId, action, timestamp: new Date().toISOString() });
        return true;
    }
}

// ==== HELPERS ====
function escapeHTML(text) {
    return String(text)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/`/g, '&#96;');
}

module.exports = {
    sendMessage,
    sendPhotoGroup,
    sendQuestion,
    sendResult,
    getUser,
    saveUser,
    updateUser,
    getStoredMessageId,
    sendAfterPaymentMessages,
    sendStartSubscription,
    markUserAsPending,
    isUserPending,
    removePendingUser,
    isCooldownPassed,
    safeSendMessage,
    escapeHTML,
    sendSticker,
    handleGameAnswer,
    getUserDisplay,
    sendPhotoToAdmin,
    approvePayment,
    sendAfterPaymentFollowup,
    handleStart
};
